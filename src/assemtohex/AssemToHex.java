/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assemtohex;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Somesh
 */
public class AssemToHex extends javax.swing.JFrame {

    /**
     * Creates new form AssemToHex
     */
    public AssemToHex() {
        initComponents();
    }
    int count = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hexTxtArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        assemTxtArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        insCount = new javax.swing.JLabel();
        startingAddress = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        addressTxtArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        add2_8bnum = new javax.swing.JMenuItem();
        add2_16bnum = new javax.swing.JMenuItem();
        cpl2s16bnum = new javax.swing.JMenuItem();
        sumseries = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        aboutInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Assembly to Machine Code (HEX) 8085MP");
        setIconImage(Toolkit.getDefaultToolkit().getImage(AssemToHex.class.getResource("icon.png")));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Assembly Code :");

        hexTxtArea.setColumns(20);
        hexTxtArea.setLineWrap(true);
        hexTxtArea.setRows(5);
        jScrollPane1.setViewportView(hexTxtArea);

        assemTxtArea.setColumns(20);
        assemTxtArea.setLineWrap(true);
        assemTxtArea.setRows(5);
        assemTxtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                assemTxtAreaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(assemTxtArea);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Machine Code (HEX) :");

        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("NOTE: Don't Give space in Operand(s)!");
        jLabel3.setToolTipText("Click to Hide");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        insCount.setText("No. of Instructions:");

        startingAddress.setText("4000");
        startingAddress.setToolTipText("");
        startingAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                startingAddressKeyTyped(evt);
            }
        });

        jLabel4.setText("StartingAdrress");

        jScrollPane1.getVerticalScrollBar().setModel(jScrollPane2.getVerticalScrollBar().getModel());
        jScrollPane1.getVerticalScrollBar().setModel(jScrollPane3.getVerticalScrollBar().getModel());
        jScrollPane2.getVerticalScrollBar().setModel(jScrollPane3.getVerticalScrollBar().getModel());
        jScrollPane2.getVerticalScrollBar().setModel(jScrollPane1.getVerticalScrollBar().getModel());
        jScrollPane3.getVerticalScrollBar().setModel(jScrollPane1.getVerticalScrollBar().getModel());
        jScrollPane3.getVerticalScrollBar().setModel(jScrollPane2.getVerticalScrollBar().getModel());

        addressTxtArea.setColumns(20);
        addressTxtArea.setRows(5);
        jScrollPane3.setViewportView(addressTxtArea);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Address :");

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Examples");

        add2_8bnum.setText("Add two 8 bit Numbers");
        add2_8bnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add2_8bnumActionPerformed(evt);
            }
        });
        jMenu3.add(add2_8bnum);

        add2_16bnum.setText("Add two 16 bit Numbers");
        add2_16bnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add2_16bnumActionPerformed(evt);
            }
        });
        jMenu3.add(add2_16bnum);

        cpl2s16bnum.setText("2's Complement of 16 bit Number");
        cpl2s16bnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpl2s16bnumActionPerformed(evt);
            }
        });
        jMenu3.add(cpl2s16bnum);

        sumseries.setText("Sum of Series of bit Numbers ");
        sumseries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumseriesActionPerformed(evt);
            }
        });
        jMenu3.add(sumseries);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("About");

        aboutInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assemtohex/About_icon.png"))); // NOI18N
        aboutInfo.setText("AssemToHex");
        aboutInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutInfoActionPerformed(evt);
            }
        });
        jMenu1.add(aboutInfo);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(insCount)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(startingAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insCount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startingAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void assemTxtAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assemTxtAreaKeyTyped
        if ((evt.getID() == KeyEvent.KEY_TYPED)
                && Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
    }//GEN-LAST:event_assemTxtAreaKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            convertToHex();        // TODO add your handling code here:

        } catch (BadLocationException ex) {
            Logger.getLogger(AssemToHex.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void aboutInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutInfoActionPerformed
        ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(AssemToHex.class.getResource("About_icon.png")));
        JOptionPane.showMessageDialog(null, "Assembly to Machine code convertor\n"
                + "Developed and Maintain by Somesh Thakur.\n"
                + "Contact : Someshthakur33@gmail.com\n"
                + "Version : 1.0", "About", JOptionPane.INFORMATION_MESSAGE, icon);        // TODO add your handling code here:
    }//GEN-LAST:event_aboutInfoActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        jLabel3.setText("");
    }//GEN-LAST:event_jLabel3MouseClicked

    private void cpl2s16bnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpl2s16bnumActionPerformed
        assemTxtArea.setText(""
                + "LXI H,4502H\n"
                + "MVI B,00H\n"
                + "MOV A,M\n"
                + "CMA\n"
                + "ADI 01H\n"
                + "STA 4503H\n"
                + "JNC 400E\n"
                + "INR B\n"
                + "INX H\n"
                + "MOV A,M\n"
                + "CMA\n"
                + "ADD B\n"
                + "STA 4504H\n"
                + "HLT\n");
    }//GEN-LAST:event_cpl2s16bnumActionPerformed

    private void add2_8bnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add2_8bnumActionPerformed
        assemTxtArea.setText(""
                + "LXI H,4501H\n"
                + "MOV A,M\n"
                + "INX H\n"
                + "ADD M\n"
                + "STA 4503H\n"
                + "HLT\n");
    }//GEN-LAST:event_add2_8bnumActionPerformed

    private void add2_16bnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add2_16bnumActionPerformed
        assemTxtArea.setText(""
                + "LHLD 4000H\n"
                + "XCHG\n"
                + "LHLD 4002H\n"
                + "MOV A,E\n"
                + "ADD L\n"
                + "MOV L,A\n"
                + "MOV A,D\n"
                + "ADC H\n"
                + "MOV H,A  \n"
                + "SHLD 4004H\n"
                + "HLT");
    }//GEN-LAST:event_add2_16bnumActionPerformed

    private void sumseriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumseriesActionPerformed
        assemTxtArea.setText(""
                + "LXI H,4501H\n"
                + "MOV C,M\n"
                + "MVI A,00H\n"
                + "INX H\n"
                + "ADD M\n"
                + "DCR C\n"
                + "JNC 4006\n"
                + "STA 4550H\n"
                + "HLT\n");
    }//GEN-LAST:event_sumseriesActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int y = JOptionPane.showConfirmDialog(null, "Do you really want to exit ? ", "Warning!", JOptionPane.YES_NO_OPTION);
        if (y == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void startingAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startingAddressKeyTyped
        if ((evt.getID() == KeyEvent.KEY_TYPED)
                && Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
        if (startingAddress.getText().length() > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_startingAddressKeyTyped
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssemToHex.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AssemToHex().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutInfo;
    private javax.swing.JMenuItem add2_16bnum;
    private javax.swing.JMenuItem add2_8bnum;
    private javax.swing.JTextArea addressTxtArea;
    private javax.swing.JTextArea assemTxtArea;
    private javax.swing.JMenuItem cpl2s16bnum;
    private javax.swing.JTextArea hexTxtArea;
    private javax.swing.JLabel insCount;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField startingAddress;
    private javax.swing.JMenuItem sumseries;
    // End of variables declaration//GEN-END:variables

    private void convertToHex() throws BadLocationException {
        new Thread() {
            @Override
            public void run() {
                try {
                    int address = Integer.parseInt(startingAddress.getText(), 16);
                    hexTxtArea.setText(null);
                    addressTxtArea.setText(null);
                    LinkedList<String> instructionsArray = new LinkedList();
                    instructionsArray.addAll(Arrays.asList(assemTxtArea.getText().split("\\n+")));
                    String tmp = assemTxtArea.getText(), operator, operand;
                    if (tmp.isEmpty() || tmp.trim().length() <= 0) {
                        JOptionPane.showMessageDialog(null, "Duh! Enter any instruction(s) to convert");
                        return;

                    }
                    boolean correctFormatInstruction;
                    int instructionsCount = 0;
                    int i = 0;
                    boolean increment;
                    for (String currentInstruction : instructionsArray) {
                        try {
                            operator = currentInstruction.substring(0, currentInstruction.indexOf(" "));
                        } catch (StringIndexOutOfBoundsException e) {
                            operator = currentInstruction;
                        }
                        operand = currentInstruction.substring(currentInstruction.indexOf(" ") + 1, currentInstruction.length());
                        correctFormatInstruction = false;
                        switch (operator) {
                            case "MOV":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("40\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("41\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("42\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("43\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("44\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("45\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("46\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "B,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("47\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("48\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("49\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("4A\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("4B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("4C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("4D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("4E\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("4F\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("50\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("51\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("52\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("53\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("54\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("55\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("56\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("57\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("58\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("59\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("5A\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("5B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("5C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("5D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("5E\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("5F\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("60\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("61\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("62\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("63\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("64\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("65\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("66\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("67\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("68\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("69\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("6A\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("6B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("6C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("6D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("6E\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("6F\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("70\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("71\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("72\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("73\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("74\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("75\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("76\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("77\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("78\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("79\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("7A\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("7B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("7C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("7D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("7E\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A,A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("7F\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                break;

                            case "ADD":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("80\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("81\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("82\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("83\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("84\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("85\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("86\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("87\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "ADC":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("88\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("89\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("8A\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("8B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("8C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("8D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("8E\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("8F\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "SUB":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("90\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("91\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("92\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("93\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("94\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("95\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("96\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("97\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "SBB":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("98\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("99\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("9A\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("9B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("9C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("9D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("9E\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("9F\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "INX":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("03\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("13\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("23\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "SP":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("33\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "PUSH":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("C5\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("D5\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("E5\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "PSW":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("F5\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "POP":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("C1\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("D1\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("E1\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "PSW":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("F1\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "DCX":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("0B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("1B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("2B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "SP":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("3B\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "STAX":
                                if ("B".equals(operand)) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                    address += 1;
                                    hexTxtArea.append("02\n");
                                    correctFormatInstruction = true;
                                } else if ("D".equals(operand)) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                    address += 1;
                                    hexTxtArea.append("12\n");
                                    correctFormatInstruction = true;
                                }

                                break;

                            case "LDAX":
                                if ("B".equals(operand)) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                    address += 1;
                                    hexTxtArea.append("0A\n");
                                    correctFormatInstruction = true;
                                } else if ("D".equals(operand)) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                    address += 1;
                                    hexTxtArea.append("1A\n");
                                    correctFormatInstruction = true;
                                }

                                break;

                            case "ANA":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A0\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A1\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A2\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A3\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A4\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A5\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A6\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A7\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "XRA":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A8\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("A9\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("AA\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("AB\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("AC\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("AD\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("AE\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("AF\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "ORA":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B0\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B1\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B2\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B3\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B4\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B5\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B6\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B7\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "CMP":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B8\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("B9\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("BA\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("BB\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("BC\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("BD\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("BE\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("BF\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "INR":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("04\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("0C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("14\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("1C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("24\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("2C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("34\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("3C\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "DCR":
                                if (null != operand) {
                                    switch (operand) {
                                        case "B":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("05\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "C":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("0D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "D":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("15\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "E":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("1D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "H":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("25\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "L":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("2D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "M":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("35\n");
                                            correctFormatInstruction = true;
                                            break;
                                        case "A":
                                            instructionsCount++;
                                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                            address += 1;
                                            hexTxtArea.append("3D\n");
                                            correctFormatInstruction = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                break;

                            case "RST":
                                boolean rstaaddr = Pattern.matches("\\d*", operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rstaaddr) {

                                    if (null != operand) {
                                        switch (operand) {
                                            case "0":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("C7 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "1":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("CF " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "2":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("D7 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "3":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("DF " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "4":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("E7 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "5":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("EF " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "6":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("F7 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            case "7":
                                                instructionsCount++;
                                                address++;
                                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                                hexTxtArea.append("FF " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                                correctFormatInstruction = true;
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                    rstaaddr = true;
                                }
                                i++;
                                break;

                            case "LXI":
                                boolean lxiaddr = Pattern.matches("\\d*", operand.substring(2, operand.length() - 1));
                                if ((operand.length() <= 6 && operand.endsWith("H")) || operand.endsWith("H") && operand.length() >= 8 || (!operand.endsWith("H")) && operand.length() > 6 || (!operand.endsWith("H")) && operand.length() < 6) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (lxiaddr) {
                                    if (operand.startsWith("B,")) {
                                        instructionsCount++;

                                        addressTxtArea.append("" + Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                        hexTxtArea.append("01 " + operand.substring(4, 6) + " " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                        address += 3;
                                    } else if (operand.startsWith("D,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                        address += 3;
                                        hexTxtArea.append("11 " + operand.substring(4, 6) + " " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("H,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                        address += 3;
                                        hexTxtArea.append("21 " + operand.substring(4, 6) + " " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("SP,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                        address += 3;
                                        hexTxtArea.append("31 " + operand.substring(4, 6) + " " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    }
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                    lxiaddr = true;
                                }
                                break;

                            case "MVI":
                                boolean mvidata = Pattern.matches("\\d*", operand.substring(2, operand.length() - 1));
                                if (operand.endsWith("H") && operand.length() > 5 || (!operand.endsWith("H")) && operand.length() > 4 || operand.length() < 4) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (mvidata) {
                                    if (operand.startsWith("B,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("06 " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("C,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("0E " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("D,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("16 " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("E,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("1E " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("H,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("26 " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("L,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("2E " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("M,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("36 " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    } else if (operand.startsWith("A,")) {
                                        instructionsCount++;
                                        addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                        address += 2;
                                        hexTxtArea.append("3E " + operand.substring(2, 4) + "\n");
                                        correctFormatInstruction = true;
                                    }
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                    mvidata = true;
                                }
                                break;

                            case "HLT":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("CF/EF (Depends on kit VI/ESA)\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "NOP":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("00\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "CMA":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("2F\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "CMC":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("3F\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "STC":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("37\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "RAR":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("1F\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "RRC":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("0F\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "RLC":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("07\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "RAL":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("17\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "DAA":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("27\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "RET":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("C9\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "SPHL":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("F9\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "XTHL":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("E3\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "XCHG":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("EB\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "RIM":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("20\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "SIM":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("30\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "EI":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("FB\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "DI":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("F3\n");
                                correctFormatInstruction = true;
                                i--;

                                break;

                            case "OUT":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("D3 " + operand.substring(0, 2) + "\n");
                                correctFormatInstruction = true;

                                break;

                            case "IN":
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("DB " + operand.substring(0, 2) + "\n");
                                correctFormatInstruction = true;

                                break;

                            case "STA":
                                boolean staaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (staaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("32 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    staaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "ADI":
                                boolean adidata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (adidata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("C6 " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    adidata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "ANI":
                                boolean anidata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (anidata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("E6 " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    anidata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "ACI":
                                boolean acidata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (acidata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("CE " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    acidata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "SUI":
                                boolean suidata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (suidata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("D6 " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    suidata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "SBI":
                                boolean sbidata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (sbidata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("DE " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    sbidata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CPI":
                                boolean cpidata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cpidata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("FE " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    cpidata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "ORI":
                                boolean oridata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (oridata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("F6 " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    oridata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "XRI":
                                boolean xridata = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 3 || operand.endsWith("H") && operand.length() < 3 || (!operand.endsWith("H")) && operand.length() > 2 || (!operand.endsWith("H")) && operand.length() < 2) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (xridata) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + "\n");
                                    address += 2;
                                    hexTxtArea.append("EE " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Data at instruction " + instructionsCount + "\n");
                                    xridata = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "LDA":
                                boolean ldaaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (ldaaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("3A " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    ldaaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JNC":
                                boolean jncaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jncaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("D2 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jncaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JNZ":
                                boolean jnzaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jnzaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("C2 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jnzaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JZ":
                                boolean jzaddr = Pattern.matches("\\d+", operand.substring(0, operand.length() - 1));
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jzaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("CA " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jzaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JC":
                                boolean jcaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jcaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("DA " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jcaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JPO":
                                boolean jpoaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jpoaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("E2 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jpoaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JPE":
                                boolean jpeaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jpeaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("EA " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jpeaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JP":
                                boolean jpaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jpaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("F2 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jpaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "JMP":
                                boolean jmpaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (jmpaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("C3 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    jmpaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "LHLD":
                                boolean lhldaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (lhldaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("2A " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    lhldaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "SHLD":
                                boolean shldaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (shldaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("22 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    shldaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RC":
                                boolean rcaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rcaddr) {
                                    instructionsCount++;
                                    address++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("D8 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rcaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RNC":
                                boolean rncaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rncaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("D0 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rncaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RP":
                                boolean rpaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() < 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rpaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("F0 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rpaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RM":
                                boolean rmaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rmaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("F8 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rmaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RZ":
                                boolean rzaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rzaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("DA " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rzaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RNZ":
                                boolean rnzaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rnzaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("C0 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rnzaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RPE":
                                boolean rpeaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rpeaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("E8 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rpeaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "RPO":
                                boolean rpoaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (rpoaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("E0 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    rpoaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CC":
                                boolean ccaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (ccaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("DC " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    ccaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CNC":
                                boolean cncaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cncaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("D4 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    cncaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CP":
                                boolean cpaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cpaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("F4 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    cpaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CM":
                                boolean cmaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cmaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("FC " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    cmaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CZ":
                                boolean czaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (czaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("CC " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    czaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CNZ":
                                boolean cnzaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cnzaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("C4 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    cnzaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CPE":
                                boolean cpeaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cpeaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("EC " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    cpeaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            case "CPO":
                                boolean cpoaddr = checkOperandHexVal(operand);
                                if (operand.endsWith("H") && operand.length() > 5 || operand.endsWith("H") && operand.length() <= 4 || (!operand.endsWith("H")) && operand.length() >= 5 || (!operand.endsWith("H")) && operand.length() < 4) {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    correctFormatInstruction = true;
                                } else if (cpoaddr) {
                                    instructionsCount++;
                                    addressTxtArea.append(Integer.toHexString(address).toUpperCase() + ", " + Integer.toHexString(address + 1).toUpperCase() + ", " + Integer.toHexString(address + 2).toUpperCase() + "\n");
                                    address += 3;
                                    hexTxtArea.append("E4 " + operand.substring(2, 4) + " " + operand.substring(0, 2) + "\n");
                                } else {
                                    instructionsCount++;
                                    address += 3;
                                    addressTxtArea.append("\n");
                                    increment = false;
                                    hexTxtArea.append("Invalid Address at instruction " + instructionsCount + "\n");
                                    cpoaddr = true;
                                }
                                correctFormatInstruction = true;

                                break;

                            default:
                                i--;
                                instructionsCount++;
                                addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                                address += 1;
                                hexTxtArea.append("Unknown Instruction!\n");
                                correctFormatInstruction = true;
                        }
                        if (!correctFormatInstruction) {
                            instructionsCount++;
                            addressTxtArea.append(Integer.toHexString(address).toUpperCase() + "\n");
                            address++;
                            hexTxtArea.append("Instruction Format is wrong!\n");
                        }
                    }
                    insCount.setText("No. of Instructions :" + instructionsCount);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Enter a Valid Starting address (HEX)!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            private boolean checkOperandHexVal(String operand) {
                try {
                    if (!operand.endsWith("H")) {
                        Integer.parseInt(operand, 16);
                    } else {
                        Integer.parseInt(operand.substring(0, operand.length() - 1), 16);
                    }
                    return true;
                } catch (NumberFormatException e) {
                    return false;
                }
            }
        }.start();
    }
}
